
: ${rt_tables_conf:=/etc/iproute2/rt_tables.d/srtla.conf}
: ${rt_table_start_offset:=500}

next_table_id() {
        if [ ! -f "$rt_tables_conf" ]; then
                echo "$rt_table_start_offset"
                return
        fi

        local table_id="$(awk '/^[0-9]/ {print $1}' "$rt_tables_conf" | sort -rn | head -n 1)"

        if [ -z "$table_id" ] || [ "$table_id" -lt "$rt_table_start_offset" ]; then
                echo "$rt_table_start_offset"
                return
        fi

        local next_id="$(($table_id+1))"

        echo "$next_id"
}

has_table() {
        local name="$1"

        if [ ! -f "$rt_tables_conf" ]; then
                return 1
        fi

        grep -qE '^[0-9]+[[:space:]]+'"$name"'[[:space:]]*$' "$rt_tables_conf"
}

add_table() {
        local name="$1"
        
        echo "$(next_table_id)\t$name" >> "$rt_tables_conf"
}

add_routes() {
        ip rule del lookup "$interface" || true
        syslog info "add_routes:" ip rule del lookup "$interface"
        ip route flush table "$interface"
        syslog info "add_routes:" ip route flush table "$interface"
        ip route add "$new_network_number"/"$new_subnet_mask" dev "$interface" proto kernel scope link src "$new_ip_address" table "$interface"
        syslog info "add_routes:" ip route add "$new_network_number"/"$new_subnet_mask" dev "$interface" proto kernel scope link src "$new_ip_address" table "$interface"
        ip route add default via "$new_routers" dev "$interface" table "$interface"
        syslog info "add_routes:" ip route add default via "$new_routers" dev "$interface" table "$interface"
        ip rule add from "$new_ip_address" lookup "$interface"
        syslog info "add_routes:" ip rule add from "$new_ip_address" lookup "$interface"
}

if $if_up && [ "$reason" = "BOUND" ] || [ "$reason" = "REBOOT" ]; then
        if ! has_table "$interface"; then
                add_table "$interface"
        fi

        add_routes
fi
        
